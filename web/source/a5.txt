 
  Assignment 5. 

1. WAP in c to input two matrix and perform addition of matrix.

        #include <stdio.h>
            int main() {
                int r, c, a[100][100], b[100][100], sum[100][100], i, j;
                printf("Enter the number of rows (between 1 and 100): ");
                scanf("%d", &r);
                printf("Enter the number of columns (between 1 and 100): ");
                scanf("%d", &c);
            
                printf("\nEnter elements of 1st matrix:\n");
                for (i = 0; i < r; ++i)
                    for (j = 0; j < c; ++j) {
                        printf("Enter element a%d%d: ", i + 1, j + 1);
                        scanf("%d", &a[i][j]);
                    }
            
                printf("Enter elements of 2nd matrix:\n");
                for (i = 0; i < r; ++i)
                    for (j = 0; j < c; ++j) {
                        printf("Enter element a%d%d: ", i + 1, j + 1);
                        scanf("%d", &b[i][j]);
                    }
            
                // adding two matrices
                for (i = 0; i < r; ++i)
                    for (j = 0; j < c; ++j) {
                        sum[i][j] = a[i][j] + b[i][j];
                    }
            
                // printing the result
                printf("\nSum of two matrices: \n");
                for (i = 0; i < r; ++i)
                    for (j = 0; j < c; ++j) {
                        printf("%d   ", sum[i][j]);
                        if (j == c - 1) {
                            printf("\n\n");
                        }
                    }
            
                return 0;
            }         
            
            
       
2. WAP in c to input two matrix and perform subtraction of matrix.

        #include <stdio.h>
 
            int main()
            {
               int m, n, c, d, first[10][10], second[10][10], difference[10][10];
             
               printf("Enter the number of rows and columns of matrix\n");
               scanf("%d%d", &m, &n);
               printf("Enter the elements of first matrix\n");
             
               for (c = 0; c < m; c++)
                 for (d = 0 ; d < n; d++)
                   scanf("%d", &first[c][d]);
             
               printf("Enter the elements of second matrix\n");
             
               for (c = 0; c < m; c++)
                 for (d = 0; d < n; d++)
                     scanf("%d", &second[c][d]);
             
               printf("Difference of entered matrices:-\n");
             
               for (c = 0; c < m; c++) {
                 for (d = 0; d < n; d++) {
                   difference[c][d] = first[c][d] - second[c][d];
                   printf("%d\t",difference[c][d]);
                 }
                 printf("\n");
               }
             
               return 0;
            }


       
3. WAP in c to input two matrix and perform multiplication of

        #include <stdio.h>

            void enterData(int firstMatrix[][10], int secondMatrix[][10], int rowFirst, int columnFirst, int rowSecond, int columnSecond);
            void multiplyMatrices(int firstMatrix[][10], int secondMatrix[][10], int multResult[][10], int rowFirst, int columnFirst, int rowSecond, int columnSecond);
            void display(int mult[][10], int rowFirst, int columnSecond);
            
            int main()
            {
                int firstMatrix[10][10], secondMatrix[10][10], mult[10][10], rowFirst, columnFirst, rowSecond, columnSecond, i, j, k;
            
                printf("Enter rows and column for first matrix: ");
                scanf("%d %d", &rowFirst, &columnFirst);
            
                printf("Enter rows and column for second matrix: ");
                scanf("%d %d", &rowSecond, &columnSecond);
            
                // If colum of first matrix in not equal to row of second matrix, asking user to enter the size of matrix again.
                while (columnFirst != rowSecond)
                {
                    printf("Error! column of first matrix not equal to row of second.\n");
                    printf("Enter rows and column for first matrix: ");
                    scanf("%d%d", &rowFirst, &columnFirst);
                    printf("Enter rows and column for second matrix: ");
                    scanf("%d%d", &rowSecond, &columnSecond);
                }
            
                // Function to take matrices data
                    enterData(firstMatrix, secondMatrix, rowFirst, columnFirst, rowSecond, columnSecond);
            
                    // Function to multiply two matrices.
                    multiplyMatrices(firstMatrix, secondMatrix, mult, rowFirst, columnFirst, rowSecond, columnSecond);
            
                    // Function to display resultant matrix after multiplication.
                    display(mult, rowFirst, columnSecond);
            
                return 0;
            }
            
            void enterData(int firstMatrix[][10], int secondMatrix[][10], int rowFirst, int columnFirst, int rowSecond, int columnSecond)
            {
                int i, j;
                printf("\nEnter elements of matrix 1:\n");
                for(i = 0; i < rowFirst; ++i)
                {
                    for(j = 0; j < columnFirst; ++j)
                    {
                        printf("Enter elements a%d%d: ", i + 1, j + 1);
                        scanf("%d", &firstMatrix[i][j]);
                    }
                }
            
                printf("\nEnter elements of matrix 2:\n");
                for(i = 0; i < rowSecond; ++i)
                {
                    for(j = 0; j < columnSecond; ++j)
                    {
                        printf("Enter elements b%d%d: ", i + 1, j + 1);
                        scanf("%d", &secondMatrix[i][j]);
                    }
                }
            }
            
            void multiplyMatrices(int firstMatrix[][10], int secondMatrix[][10], int mult[][10], int rowFirst, int columnFirst, int rowSecond, int columnSecond)
            {
                int i, j, k;
            
                // Initializing elements of matrix mult to 0.
                for(i = 0; i < rowFirst; ++i)
                {
                    for(j = 0; j < columnSecond; ++j)
                    {
                        mult[i][j] = 0;
                    }
                }
            
                // Multiplying matrix firstMatrix and secondMatrix and storing in array mult.
                for(i = 0; i < rowFirst; ++i)
                {
                    for(j = 0; j < columnSecond; ++j)
                    {
                        for(k=0; k<columnFirst; ++k)
                        {
                            mult[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
                        }
                    }
                }
            }
            
            void display(int mult[][10], int rowFirst, int columnSecond)
            {
                int i, j;
                printf("\nOutput Matrix:\n");
                for(i = 0; i < rowFirst; ++i)
                {
                    for(j = 0; j < columnSecond; ++j)
                    {
                        printf("%d  ", mult[i][j]);
                        if(j == columnSecond - 1)
                            printf("\n\n");
                    }
                }
            } 

       
 